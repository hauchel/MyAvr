https://www.tweaking4all.com/hardware/arduino/adruino-led-strip-effects/
https://adrianotiger.github.io/Neopixel-Effect-Generator/
https://www.instructables.com/id/NeoPixel-Pattern-Programmer/

Ziel Weihnachtsschmuck Lichteffekte erzeugen
Hardware A* Mini Pro +  TSOP4838  + 24 * ws2812  als 6*4 Stern 
zur Ablaufgestaltung  Terminal erforderlich
zur Ausführung reicht RC5 Fernbedienung 

LEDA = LED Effect Description Ablauf: rudimentärer Code zu Ablaufsteuerung
Stark gewöhnungsbedürftig da reverse Notation, d.h erst Parameter dann Befehl.
Befehle sind nur ein Zeichen, das reduziert den Schreib/Speicheraufwand und trainiert das Hirn.

Register inp:
Das Register inp enthält int, gesetzt durch Ziffer,#,BS
0..9			inp <- inp*10 + Ziffer
#				inp <- inp+1
BS				inp <- inp/10
Das gilt solange bis andere Zeichen eingegeben werden. 
Space			dient als optischer Trenner, beendet Ziffernmodus sonst nix.
Beispiel:
98				; inp ist 98
98 2			; inp ist 2
7#				; inp ist 8

Pixel:
Ein pix	enhält RGB-Werte (0 bis 255) 
r g b 			setzt diese Werte auf inp
R G B			setzt inp auf r oder g  oder b von pix
a	(analog)	setzt pix auf A0,A1,A2 /4 (3 Potis z.B. 10k zwischen VCC und GND)
l	(LED) 		überträgt pix -> LED[inp]
L               überträgt LED[inp] nach pix
f	(fill) 		füllt alle LEDs mit pix
F   (fade)		siehe unten
z	(zero) 		füllt alle LEDs mit 0/0/0
Beachte dass inp zwischen Befehlen erhalten bleibt, erst wenn wieder Ziffer oder # wird es geändert.
Beispiel:
z10r4l#l##l		; Löscht alle LEDs, 4,5,7 auf wenig rot
255rgbf			; Fernlicht / Test Spannungsversorgung
af				; liest Analog 0,1,2 und setzt RGB aller LEDs auf eingelesene Werte(0..1023) / 4 

10 verschiedene RGB Werte können im color-Array[0..9] abgelegt werden
c 				pix <- color(inp)
C				color(inp) <- pix
Beispiel:
30r0gb1C		; color 1 ist dunkles rot
1c8l			; LED 8 auf color 1

Nebenbei:
v (verbose)		toggelt 0 nix, 1 wait und update , 2 Trace
V    			toggle echo von erhaltenen Zeichen
CR				zeige wichtigste Infos:  ... Inp     7 Led   7 pix R 10 G  0 B 26  ...
?				(siehe unten) zeige alle stacks und den loop-Status, memo nur wenn != 0

Der Pix-Stack dient dazu, LED-Werte zu sichern um sie nachher wieder herzustellen.
D				pusht r,g,b von LED(inp) und inp auf den Pix-Stack
d				stellt diese LED-Werte wieder her (pull). 
Beispiel:
5Dl3c...d	sichere LED 5, setze auf Farbe 3, d stellt LED 5 wieder her.

Ein Ablauf ist eine Folge von Befehlen in dem Null-terminated String bef[].
Diese werden im EEprom oder im Arduino Sourcecode (befehle[]) gespeichert.
m (memory) 		bef <- Eprom-Inhalt mit key inp (1..249)
n				bef <- befehle[inp] aus Sourcecode (0..pgmbefM)
M 				zeige Eprom-Inhalte
I				initialisiere Eprom (schreibt nur ein byte, undo möglich s.u.)
w (write)		schreibe bef-> Eprom mit key inp
W				lösche Eprom key inp
bef kann auch über Serial eingelesen werden, das ist aber blocking bis CR.
e (edit)	bef <- nachfolgende Eingaben bis CR
Beispiel:

Ablaufbefehle:
Ein befP zeigt auf den nächsten auszuführende Befehl (ab 0) in bef
X	(exec)		führe bef ab 0 aus 
x				lies Eprom mit key inp und führe aus (gosub)
y				lies Befehle[inp] und führe aus (gosub)
q	(quit)		stop Execution (runMode 0),
Q				stop and reset stacks, befP
s	(single) 	single step  (runMode 1)
k	(kontinue)  beende single step oder nach stop
j  	(jump)    	springe zum #inp byte in bef
S	(Stack)		zeige Stack
Beispiel:
3y		;
3ms		; lade Ablauf 3 und starte single step
0~4,23,0U,s~c,1+~,32xu	Breakpoint nach push des aktuellen Schleifenwerts (U,s)

Calc, Memo, Parameter
Ein inp-Stack(20) und 21 Memo-Register dienen zur Speicherung von Werten oder Übergabe von Parametern
,	push inp
+	inp <- pop + inp
-  	inp <- pop - inp 
*	
/
|
&
~	swap inp und inpsw 
>   memo[inp] <- pop
<	inp <- memo[inp]

Beispiel:
3,1>  	speichere 3 in memo[1]
5<		setze inp auf memo[5]
,7+		erhöhe inp um 7
~0,~-	inp = -inp
0,4-	inp auf -4
0+		pop inp
3,2,22x rufe Ablauf 22 params 2 3
		gerufener: 0+ .. inp ist 2 .. 0+ für3
		
Schleifen im Ablauf sind definiert durch startwert, increment und endewert 
U		 starte eine Schleife  (for) mit end, inc vom Stack, inp ist Anfangswert 
u		 neuer Wert errechnen, wenn Wert < Endewert springe zum Befehl nach U mit inp diesen Wert

inc, end, start U ... u
Beispiel:
5DlTtdu
z1,9,0Uclu	Lösche Leds dann setze LED 0 auf color 0, LED 1 auf color 1 usw bis LED 9

6,33x	rufe Ablauf 33, 6 sei Anfangswert für Schleife 4,24,6
		gerufener: 0+~4,24,~U ... u
Schleifen können max 6 geschachtelt sein 		


Zeitsteuerung über Ticks, eingestellt sind 40ms pro Tick (tickTim) d.h. 25 Updates / sec
Array-update nur wenn Tick
T   setze anzahl der Warteticks aus memo[9], update ggf LEDs und disable LED update
t	warte bis Ticks abgelaufen, dann update LEDS
Beispiel:
20,9>			;
T befehle t		;



Überblick Moves:
Von/Nach:   Array  Pix		Color   Memo	inp
Array				 L				D
Pix			l				 C				RGB
Color				 c
Memo		d
inp					rgb				>
Analog		 		 a


Fading benutzt memos 10 bis 21 für Parameter für g,r,b
rndMin	10	14	18
rndMax	11	15	19
valMin	12	16	20
valMax	13	17	21


falls rndMin==rndMax 

Beispiel:
4,19,10U~ 30,5,4,0,4-, 1,~,~3+,~U>uu  setze alle 3 Farben auf -4 4 5 30

Muster einzelne pix:
vorher setzen ticks, inp first, rgb pix

colors define	 	10     0 leer, 1 rot, 2 orange .. 7 weiss
colors show      	11	

Orbit links  		21		Höhe auf stack farbe pix speed 3,9>
Spirale links		22		0,21x1,21x2,21x3,21x
Orbit rechts 		23  	Höhe auf stack(23,22,21,20) 
Spirale rechts		24		23,23x22,23x21,23x20,23x
Ring				25		0+~4,23,~Ulu
Balken 	
					31		push  Balken (4 leds) ab inp
					32		Balken ab pop in pix
							0+l#l#l#l
					33		6 Balken c0 bis 5
							0~4,23,0U~c,1+~,32xu
					34      rotiere Ring rechts (Höhe 0..3 von stack)
							0+,~0+L9C4,23,4,~+UL,4-lu,9c4-l
					35 		rotiere Balken rechts speed t
							1,3,0TU,34xut0j
Explosion
Ring
Random color change

Speicherung vieler Strings im EEPROM ATMega 328 
Viele Strings unterschiedlicher Länge (<100), die vom Benutzer geändert werden können. 

Da sich dabei auch deren Länge ändert, zudem sollen 
Schreibzeit ist unkritisch, Lesen sollte nicht wesentlich länger dauern. Habe zur Zeit folgenden Ansatz:
gespeichert jeweils key und offset zum Nächsten als Byte. Key FF ist reserviert für Ende , FE für Unbenutzt
Beispiel für key 3
 0  1 2 3 4 5 6 7  8 ... 15 16 
03 15 S t r i n g \0        FF  

Initialisieren: FF nach 0;
Schreiben von n bytes (einschl \0) mit Key k:
Sequentiell durchgehen bis Ende oder Key gefunden.
	Ende: schreibe key und offset (mit reserve) ,string und FF bei Nachfolger
	Gefunden: Passt rein sonst Key auf 0xFE und anhängen
Lesen: bei 0 beginnend suche passenden key 
Löschen: setze zu löschenden key-Eintrag auf oxFE, kombiniere freie mit Nachbarn wenn offset <255
Nachteil, dass häufig geänderte strings den Speicher abnutzen, nach 100000 Änderungen ist Schluss...
0+~4,23,~Ulu