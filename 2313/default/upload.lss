
upload.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000061a  000006ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  000006b6  2**0
                  ALLOC
  3 .stab         000006a8  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000fb  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000028  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000e42  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000006c8  00000000  00000000  00001d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000001f8  00000000  00000000  000023de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000218  00000000  00000000  000025d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000450  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000803  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000040  00000000  00000000  00003443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	71 c0       	rjmp	.+226    	; 0xe6 <__bad_interrupt>
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	6f c0       	rjmp	.+222    	; 0xe6 <__bad_interrupt>
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	6d c0       	rjmp	.+218    	; 0xe6 <__bad_interrupt>
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	6b c0       	rjmp	.+214    	; 0xe6 <__bad_interrupt>
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	69 c0       	rjmp	.+210    	; 0xe6 <__bad_interrupt>
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	67 c0       	rjmp	.+206    	; 0xe6 <__bad_interrupt>
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	65 c0       	rjmp	.+202    	; 0xe6 <__bad_interrupt>
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	63 c0       	rjmp	.+198    	; 0xe6 <__bad_interrupt>
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	61 c0       	rjmp	.+194    	; 0xe6 <__bad_interrupt>
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	5f c0       	rjmp	.+190    	; 0xe6 <__bad_interrupt>
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>

0000002a <__trampolines_end>:
  2a:	1b 5b       	subi	r17, 0xBB	; 187
  2c:	48 1b       	sub	r20, r24
  2e:	5b 4a       	sbci	r21, 0xAB	; 171
  30:	20 52       	subi	r18, 0x20	; 32
  32:	65 61       	ori	r22, 0x15	; 21
  34:	64 79       	andi	r22, 0x94	; 148
  36:	2e 0d       	add	r18, r14
	...

00000039 <stWait>:
  39:	57 61 69 74 20 69 73 00                             Wait is.

00000041 <stVerb>:
  41:	56 65 72 62 6f 20 69 73 00                          Verbo is.

0000004a <stSet>:
  4a:	73 65 74 00                                         set.

0000004e <stStop>:
  4e:	53 74 6f 70 70 65 64 00                             Stopped.

00000056 <stRun>:
  56:	72 75 6e 6e 69 6e 67 00                             running.

0000005e <stProg>:
  5e:	50 72 6f 67 00                                      Prog.

00000063 <stOne>:
  63:	74 77 6f 20 70 75 6c 73 65 00                       two pulse.

0000006d <stLo>:
  6d:	73 65 74 20 4c 6f 0d 00                             set Lo..

00000075 <stInfo>:
  75:	0d 66 6c 69 70 64 6f 74 20 44 65 63 20 20 37 20     .flipdot Dec  7 
  85:	32 30 32 34 20 31 35 3a 30 31 3a 30 36 00           2024 15:01:06.

00000093 <stHi>:
  93:	73 65 74 20 48 69 0d 00                             set Hi..

0000009b <stEna>:
  9b:	45 6e 61 62 6c 65 64 00                             Enabled.

000000a3 <stDisa>:
  a3:	44 69 73 61 62 6c 65 64 0d 00                       Disabled..

000000ad <stDauer>:
  ad:	44 61 75 65 72 00 00                                Dauer..

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ed       	ldi	r28, 0xDF	; 223
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	a0 e6       	ldi	r26, 0x60	; 96
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	ea e1       	ldi	r30, 0x1A	; 26
  c4:	f6 e0       	ldi	r31, 0x06	; 6
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
  c8:	05 90       	lpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a8 36       	cpi	r26, 0x68	; 104
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	a8 e6       	ldi	r26, 0x68	; 104
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a0 37       	cpi	r26, 0x70	; 112
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	40 d2       	rcall	.+1152   	; 0x564 <main>
  e4:	98 c2       	rjmp	.+1328   	; 0x616 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <serial_setup>:
#define USART_BAUDRATE 38400 
#define UBRR_VALUE (((F_CPU/(USART_BAUDRATE*16UL)))-1)


void serial_setup(){
	UBRRL = UBRR_VALUE & 255; 
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_VALUE >> 8;
  ec:	12 b8       	out	0x02, r1	; 2
	UCSRB = (1 << TXEN) | (1 << RXEN); 
  ee:	88 e1       	ldi	r24, 0x18	; 24
  f0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << UCSZ1) | (1 << UCSZ0); 
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	83 b9       	out	0x03, r24	; 3
  f6:	08 95       	ret

000000f8 <serial_receive>:
}

uint8_t serial_receive() {
uint8_t stat;
  stat=UCSRA&(1<<RXC);
  if (stat==0) {
  f8:	5f 9b       	sbis	0x0b, 7	; 11
  fa:	02 c0       	rjmp	.+4      	; 0x100 <serial_receive+0x8>
    return 0;
  } else {
    return UDR;
  fc:	8c b1       	in	r24, 0x0c	; 12
  fe:	08 95       	ret

uint8_t serial_receive() {
uint8_t stat;
  stat=UCSRA&(1<<RXC);
  if (stat==0) {
    return 0;
 100:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    return UDR;
  }
}
 102:	08 95       	ret

00000104 <serial_putch>:

void serial_putch(uint8_t data){
	// send a single character via USART
	while(!(UCSRA&(1<<UDRE))){}; //wait while previous byte is completed
 104:	5d 9b       	sbis	0x0b, 5	; 11
 106:	fe cf       	rjmp	.-4      	; 0x104 <serial_putch>
	UDR = data; // Transmit data
 108:	8c b9       	out	0x0c, r24	; 12
 10a:	08 95       	ret

0000010c <serial_num>:
}

void serial_num(uint16_t val){
 10c:	af 92       	push	r10
 10e:	bf 92       	push	r11
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	8c 01       	movw	r16, r24
	// send a number as ASCII text
	uint16_t divby=10000; // change by dataType
    bool anf=true;      // leading zero
    uint8_t tmp;

    if (val==0) {
 120:	89 2b       	or	r24, r25
 122:	59 f4       	brne	.+22     	; 0x13a <serial_num+0x2e>
        serial_putch('0');
 124:	80 e3       	ldi	r24, 0x30	; 48
    		serial_putch('0'+tmp);
        }
		val-=(val/divby)*divby;
		divby/=10;
	}
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	df 90       	pop	r13
 134:	bf 90       	pop	r11
 136:	af 90       	pop	r10
	uint16_t divby=10000; // change by dataType
    bool anf=true;      // leading zero
    uint8_t tmp;

    if (val==0) {
        serial_putch('0');
 138:	e5 cf       	rjmp	.-54     	; 0x104 <serial_putch>
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	e8 2e       	mov	r14, r24
 13e:	f1 2c       	mov	r15, r1
 140:	dd 24       	eor	r13, r13
 142:	d3 94       	inc	r13
 144:	c0 e1       	ldi	r28, 0x10	; 16
 146:	d7 e2       	ldi	r29, 0x27	; 39
            }
        } else {
    		serial_putch('0'+tmp);
        }
		val-=(val/divby)*divby;
		divby/=10;
 148:	9a e0       	ldi	r25, 0x0A	; 10
 14a:	a9 2e       	mov	r10, r25
 14c:	b1 2c       	mov	r11, r1
    if (val==0) {
        serial_putch('0');
        return;
    }
	while (divby>=1){
       tmp=val/divby;
 14e:	c8 01       	movw	r24, r16
 150:	be 01       	movw	r22, r28
 152:	2b d2       	rcall	.+1110   	; 0x5aa <__udivmodhi4>
 154:	86 2f       	mov	r24, r22
        if (anf) {
 156:	dd 20       	and	r13, r13
 158:	31 f0       	breq	.+12     	; 0x166 <serial_num+0x5a>
            if (tmp!=0) {
 15a:	66 23       	and	r22, r22
 15c:	31 f0       	breq	.+12     	; 0x16a <serial_num+0x5e>
                anf=false;
    	        serial_putch('0'+tmp);
 15e:	80 5d       	subi	r24, 0xD0	; 208
 160:	d1 df       	rcall	.-94     	; 0x104 <serial_putch>
    }
	while (divby>=1){
       tmp=val/divby;
        if (anf) {
            if (tmp!=0) {
                anf=false;
 162:	d1 2c       	mov	r13, r1
 164:	02 c0       	rjmp	.+4      	; 0x16a <serial_num+0x5e>
    	        serial_putch('0'+tmp);
            }
        } else {
    		serial_putch('0'+tmp);
 166:	80 5d       	subi	r24, 0xD0	; 208
 168:	cd df       	rcall	.-102    	; 0x104 <serial_putch>
        }
		val-=(val/divby)*divby;
 16a:	c8 01       	movw	r24, r16
 16c:	be 01       	movw	r22, r28
 16e:	1d d2       	rcall	.+1082   	; 0x5aa <__udivmodhi4>
 170:	8c 01       	movw	r16, r24
		divby/=10;
 172:	ce 01       	movw	r24, r28
 174:	b5 01       	movw	r22, r10
 176:	19 d2       	rcall	.+1074   	; 0x5aa <__udivmodhi4>
 178:	eb 01       	movw	r28, r22
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	e8 1a       	sub	r14, r24
 17e:	f1 08       	sbc	r15, r1

    if (val==0) {
        serial_putch('0');
        return;
    }
	while (divby>=1){
 180:	31 f7       	brne	.-52     	; 0x14e <serial_num+0x42>
    		serial_putch('0'+tmp);
        }
		val-=(val/divby)*divby;
		divby/=10;
	}
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	df 90       	pop	r13
 190:	bf 90       	pop	r11
 192:	af 90       	pop	r10
 194:	08 95       	ret

00000196 <serial_num32>:

void serial_num32(uint32_t val){
 196:	4f 92       	push	r4
 198:	5f 92       	push	r5
 19a:	6f 92       	push	r6
 19c:	7f 92       	push	r7
 19e:	8f 92       	push	r8
 1a0:	9f 92       	push	r9
 1a2:	af 92       	push	r10
 1a4:	bf 92       	push	r11
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	4b 01       	movw	r8, r22
 1b6:	5c 01       	movw	r10, r24
 1b8:	c9 e0       	ldi	r28, 0x09	; 9
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
	// send a number as ASCII text
  //             987654321
	uint32_t divby=100000000; // change by dataType
  bool anf=true;
 1bc:	11 e0       	ldi	r17, 0x01	; 1
}

void serial_num32(uint32_t val){
	// send a number as ASCII text
  //             987654321
	uint32_t divby=100000000; // change by dataType
 1be:	c1 2c       	mov	r12, r1
 1c0:	81 ee       	ldi	r24, 0xE1	; 225
 1c2:	d8 2e       	mov	r13, r24
 1c4:	85 ef       	ldi	r24, 0xF5	; 245
 1c6:	e8 2e       	mov	r14, r24
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	f8 2e       	mov	r15, r24
      }
    } else {
    		serial_putch('0'+tmp);
    }
		val-=(val/divby)*divby;
		divby/=10;
 1cc:	9a e0       	ldi	r25, 0x0A	; 10
 1ce:	49 2e       	mov	r4, r25
 1d0:	51 2c       	mov	r5, r1
 1d2:	61 2c       	mov	r6, r1
 1d4:	71 2c       	mov	r7, r1
  //             987654321
	uint32_t divby=100000000; // change by dataType
  bool anf=true;
  uint8_t tmp;
	while (divby>=1){
    tmp=val/divby;
 1d6:	c5 01       	movw	r24, r10
 1d8:	b4 01       	movw	r22, r8
 1da:	a7 01       	movw	r20, r14
 1dc:	96 01       	movw	r18, r12
 1de:	f9 d1       	rcall	.+1010   	; 0x5d2 <__udivmodsi4>
 1e0:	82 2f       	mov	r24, r18
    if (anf) {
 1e2:	11 23       	and	r17, r17
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <serial_num32+0x5c>
      if (tmp!=0) {
 1e6:	22 23       	and	r18, r18
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <serial_num32+0x60>
        anf=false;
    		serial_putch('0'+tmp);
 1ea:	80 5d       	subi	r24, 0xD0	; 208
 1ec:	8b df       	rcall	.-234    	; 0x104 <serial_putch>
  uint8_t tmp;
	while (divby>=1){
    tmp=val/divby;
    if (anf) {
      if (tmp!=0) {
        anf=false;
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <serial_num32+0x60>
    		serial_putch('0'+tmp);
      }
    } else {
    		serial_putch('0'+tmp);
 1f2:	80 5d       	subi	r24, 0xD0	; 208
 1f4:	87 df       	rcall	.-242    	; 0x104 <serial_putch>
    }
		val-=(val/divby)*divby;
 1f6:	c5 01       	movw	r24, r10
 1f8:	b4 01       	movw	r22, r8
 1fa:	a7 01       	movw	r20, r14
 1fc:	96 01       	movw	r18, r12
 1fe:	e9 d1       	rcall	.+978    	; 0x5d2 <__udivmodsi4>
 200:	4b 01       	movw	r8, r22
 202:	5c 01       	movw	r10, r24
		divby/=10;
 204:	c7 01       	movw	r24, r14
 206:	b6 01       	movw	r22, r12
 208:	a3 01       	movw	r20, r6
 20a:	92 01       	movw	r18, r4
 20c:	e2 d1       	rcall	.+964    	; 0x5d2 <__udivmodsi4>
 20e:	69 01       	movw	r12, r18
 210:	7a 01       	movw	r14, r20
 212:	21 97       	sbiw	r28, 0x01	; 1
	// send a number as ASCII text
  //             987654321
	uint32_t divby=100000000; // change by dataType
  bool anf=true;
  uint8_t tmp;
	while (divby>=1){
 214:	01 f7       	brne	.-64     	; 0x1d6 <serial_num32+0x40>
    		serial_putch('0'+tmp);
    }
		val-=(val/divby)*divby;
		divby/=10;
	}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	df 90       	pop	r13
 222:	cf 90       	pop	r12
 224:	bf 90       	pop	r11
 226:	af 90       	pop	r10
 228:	9f 90       	pop	r9
 22a:	8f 90       	pop	r8
 22c:	7f 90       	pop	r7
 22e:	6f 90       	pop	r6
 230:	5f 90       	pop	r5
 232:	4f 90       	pop	r4
 234:	08 95       	ret

00000236 <serial_str>:

void serial_str(const char txt[]) {
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	8c 01       	movw	r16, r24
uint8_t i=0;
 23e:	c0 e0       	ldi	r28, 0x00	; 0
  while(txt[i] != 0) {
 240:	f8 01       	movw	r30, r16
 242:	ec 0f       	add	r30, r28
 244:	f1 1d       	adc	r31, r1
 246:	80 81       	ld	r24, Z
 248:	88 23       	and	r24, r24
 24a:	19 f0       	breq	.+6      	; 0x252 <serial_str+0x1c>
    serial_putch(txt[i]);
 24c:	5b df       	rcall	.-330    	; 0x104 <serial_putch>
    i++;
 24e:	cf 5f       	subi	r28, 0xFF	; 255
 250:	f7 cf       	rjmp	.-18     	; 0x240 <serial_str+0xa>
  }
}
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <serial_strP>:

void serial_strP(const char txt[]) {
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	8c 01       	movw	r16, r24
uint8_t i=0;
 264:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t x=1;
  while(x != 0) {
    x=pgm_read_byte(&txt[i]);
 266:	f8 01       	movw	r30, r16
 268:	ed 0f       	add	r30, r29
 26a:	f1 1d       	adc	r31, r1
 26c:	c4 91       	lpm	r28, Z
    serial_putch(x);
 26e:	8c 2f       	mov	r24, r28
 270:	49 df       	rcall	.-366    	; 0x104 <serial_putch>
    i++;
 272:	df 5f       	subi	r29, 0xFF	; 255
}

void serial_strP(const char txt[]) {
uint8_t i=0;
uint8_t x=1;
  while(x != 0) {
 274:	c1 11       	cpse	r28, r1
 276:	f7 cf       	rjmp	.-18     	; 0x266 <serial_strP+0xc>
    x=pgm_read_byte(&txt[i]);
    serial_putch(x);
    i++;
  }
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <msg>:

void msg(const char txt[],uint16_t val) {
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	eb 01       	movw	r28, r22
// from progmem: 
  serial_strP(txt);    
 288:	e8 df       	rcall	.-48     	; 0x25a <serial_strP>
  serial_putch(' ');
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	3b df       	rcall	.-394    	; 0x104 <serial_putch>
  serial_num(val);
 28e:	ce 01       	movw	r24, r28
 290:	3d df       	rcall	.-390    	; 0x10c <serial_num>
  serial_putch('\r');
 292:	8d e0       	ldi	r24, 0x0D	; 13
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
void msg(const char txt[],uint16_t val) {
// from progmem: 
  serial_strP(txt);    
  serial_putch(' ');
  serial_num(val);
  serial_putch('\r');
 298:	35 cf       	rjmp	.-406    	; 0x104 <serial_putch>

0000029a <msg32>:
}


void msg32(const char txt[],uint32_t val) {
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	dd 27       	eor	r29, r29
 2a2:	c4 50       	subi	r28, 0x04	; 4
 2a4:	cd bf       	out	0x3d, r28	; 61
// from progmem: 
  serial_strP(txt);    
 2a6:	49 83       	std	Y+1, r20	; 0x01
 2a8:	5a 83       	std	Y+2, r21	; 0x02
 2aa:	6b 83       	std	Y+3, r22	; 0x03
 2ac:	7c 83       	std	Y+4, r23	; 0x04
 2ae:	d5 df       	rcall	.-86     	; 0x25a <serial_strP>
  serial_putch(' ');
 2b0:	80 e2       	ldi	r24, 0x20	; 32
 2b2:	28 df       	rcall	.-432    	; 0x104 <serial_putch>
  serial_num32(val);
 2b4:	49 81       	ldd	r20, Y+1	; 0x01
 2b6:	5a 81       	ldd	r21, Y+2	; 0x02
 2b8:	6b 81       	ldd	r22, Y+3	; 0x03
 2ba:	7c 81       	ldd	r23, Y+4	; 0x04
 2bc:	cb 01       	movw	r24, r22
 2be:	ba 01       	movw	r22, r20
 2c0:	6a df       	rcall	.-300    	; 0x196 <serial_num32>
  serial_putch('\r');
 2c2:	8d e0       	ldi	r24, 0x0D	; 13
}
 2c4:	cc 5f       	subi	r28, 0xFC	; 252
 2c6:	cd bf       	out	0x3d, r28	; 61
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
void msg32(const char txt[],uint32_t val) {
// from progmem: 
  serial_strP(txt);    
  serial_putch(' ');
  serial_num32(val);
  serial_putch('\r');
 2cc:	1b cf       	rjmp	.-458    	; 0x104 <serial_putch>

000002ce <mydelay>:
}

void mydelay(uint16_t mst ) {
// about 1/10th of a ms
  while (mst > 0) {
 2ce:	00 97       	sbiw	r24, 0x00	; 0
 2d0:	41 f0       	breq	.+16     	; 0x2e2 <mydelay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	e7 ec       	ldi	r30, 0xC7	; 199
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <mydelay+0x8>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <mydelay+0xe>
 2dc:	00 00       	nop
    _delay_us(100);
    mst--;
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f6 cf       	rjmp	.-20     	; 0x2ce <mydelay>
  }
}
 2e2:	08 95       	ret

000002e4 <delayOrKey>:

bool delayOrKey (uint16_t mst) {
    while (mst > 0) {
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	51 f0       	breq	.+20     	; 0x2fc <delayOrKey+0x18>
        if ( (UCSRA & (1<<RXC)) >0) return true;
 2e8:	5f 99       	sbic	0x0b, 7	; 11
 2ea:	0a c0       	rjmp	.+20     	; 0x300 <delayOrKey+0x1c>
 2ec:	e7 ec       	ldi	r30, 0xC7	; 199
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <delayOrKey+0xc>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <delayOrKey+0x12>
 2f6:	00 00       	nop
        _delay_us(100);
        mst--;
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f4 cf       	rjmp	.-24     	; 0x2e4 <delayOrKey>
    }
    return false;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	08 95       	ret
  }
}

bool delayOrKey (uint16_t mst) {
    while (mst > 0) {
        if ( (UCSRA & (1<<RXC)) >0) return true;
 300:	81 e0       	ldi	r24, 0x01	; 1
        _delay_us(100);
        mst--;
    }
    return false;
}
 302:	08 95       	ret

00000304 <pulse>:
const char stWait   [] PROGMEM = "Wait is";
const char stVTClr  [] PROGMEM = "\x1B[H\x1B[J Ready.\r";


void pulse() {
    PORTD |=_BV(pdEna);  //Hi
 304:	96 9a       	sbi	0x12, 6	; 18
    mydelay(dauer);
 306:	80 91 62 00 	lds	r24, 0x0062
 30a:	90 91 63 00 	lds	r25, 0x0063
 30e:	df df       	rcall	.-66     	; 0x2ce <mydelay>
    PORTD &= ~_BV(pdEna);  // Lo
 310:	96 98       	cbi	0x12, 6	; 18
 312:	08 95       	ret

00000314 <setHi>:
}

void setHi() {
    PORTD &= ~_BV(pdMoLi);  // Lo
 314:	94 98       	cbi	0x12, 4	; 18
    PORTD |=_BV(pdMoRe);  //Hi
 316:	95 9a       	sbi	0x12, 5	; 18
 318:	08 95       	ret

0000031a <setLo>:
}

void setLo() {
    PORTD &= ~_BV(pdMoRe);  // Lo
 31a:	95 98       	cbi	0x12, 5	; 18
    PORTD |=_BV(pdMoLi);  //Hi
 31c:	94 9a       	sbi	0x12, 4	; 18
 31e:	08 95       	ret

00000320 <strobe>:
}

void strobe() {
    setLo();
 320:	fc df       	rcall	.-8      	; 0x31a <setLo>
    pulse();
 322:	f0 df       	rcall	.-32     	; 0x304 <pulse>
    setHi();
 324:	f7 df       	rcall	.-18     	; 0x314 <setHi>
    pulse();
 326:	ee cf       	rjmp	.-36     	; 0x304 <pulse>

00000328 <prog1>:
}

uint8_t prog1() {
    static uint8_t  w;
    w = w << 1;
 328:	80 91 6c 00 	lds	r24, 0x006C
 32c:	88 0f       	add	r24, r24
    if (w==0) w=1;
 32e:	09 f4       	brne	.+2      	; 0x332 <prog1+0xa>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 6c 00 	sts	0x006C, r24
    PORTB = w;
 336:	80 91 6c 00 	lds	r24, 0x006C
 33a:	88 bb       	out	0x18, r24	; 24
    strobe();
 33c:	f1 df       	rcall	.-30     	; 0x320 <strobe>
    if (verbo) msg(stProg,w);
 33e:	80 91 6a 00 	lds	r24, 0x006A
 342:	88 23       	and	r24, r24
 344:	31 f0       	breq	.+12     	; 0x352 <prog1+0x2a>
 346:	60 91 6c 00 	lds	r22, 0x006C
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	8e e5       	ldi	r24, 0x5E	; 94
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	98 df       	rcall	.-208    	; 0x282 <msg>
    delayOrKey(progwait);
 352:	80 91 60 00 	lds	r24, 0x0060
 356:	90 91 61 00 	lds	r25, 0x0061
 35a:	c4 df       	rcall	.-120    	; 0x2e4 <delayOrKey>
    return w;
}
 35c:	80 91 6c 00 	lds	r24, 0x006C
 360:	08 95       	ret

00000362 <prog2>:

uint8_t prog2() {
    static uint8_t  w;
    w = w << 1;
 362:	80 91 6b 00 	lds	r24, 0x006B
 366:	88 0f       	add	r24, r24
    if (w==0) w=1;
 368:	09 f4       	brne	.+2      	; 0x36c <prog2+0xa>
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 6b 00 	sts	0x006B, r24
    PORTB = w;
 370:	80 91 6b 00 	lds	r24, 0x006B
 374:	88 bb       	out	0x18, r24	; 24
    strobe();
 376:	d4 df       	rcall	.-88     	; 0x320 <strobe>
    if (verbo) msg(stProg,w);
 378:	80 91 6a 00 	lds	r24, 0x006A
 37c:	88 23       	and	r24, r24
 37e:	31 f0       	breq	.+12     	; 0x38c <prog2+0x2a>
 380:	60 91 6b 00 	lds	r22, 0x006B
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	8e e5       	ldi	r24, 0x5E	; 94
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	7b df       	rcall	.-266    	; 0x282 <msg>
    delayOrKey(progwait);
 38c:	80 91 60 00 	lds	r24, 0x0060
 390:	90 91 61 00 	lds	r25, 0x0061
 394:	a7 df       	rcall	.-178    	; 0x2e4 <delayOrKey>
    return w;
}
 396:	80 91 6b 00 	lds	r24, 0x006B
 39a:	08 95       	ret

0000039c <doCmd>:

void doCmd( char x) {
 39c:	cf 93       	push	r28
 39e:	c8 2f       	mov	r28, r24
  serial_putch(x);
 3a0:	b1 de       	rcall	.-670    	; 0x104 <serial_putch>
  if ( x == 8) { //backspace removes last digit
 3a2:	c8 30       	cpi	r28, 0x08	; 8
 3a4:	61 f4       	brne	.+24     	; 0x3be <doCmd+0x22>
    inp = inp / 10;
 3a6:	80 91 6d 00 	lds	r24, 0x006D
 3aa:	90 91 6e 00 	lds	r25, 0x006E
 3ae:	6a e0       	ldi	r22, 0x0A	; 10
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	fb d0       	rcall	.+502    	; 0x5aa <__udivmodhi4>
 3b4:	70 93 6e 00 	sts	0x006E, r23
 3b8:	60 93 6d 00 	sts	0x006D, r22
    return;
 3bc:	bc c0       	rjmp	.+376    	; 0x536 <doCmd+0x19a>
  }
  if ((x>= '0') && (x <= '9')) {
 3be:	80 ed       	ldi	r24, 0xD0	; 208
 3c0:	8c 0f       	add	r24, r28
 3c2:	8a 30       	cpi	r24, 0x0A	; 10
 3c4:	d8 f4       	brcc	.+54     	; 0x3fc <doCmd+0x60>
    if (inpAkt) {
 3c6:	80 91 6f 00 	lds	r24, 0x006F
 3ca:	2c 2f       	mov	r18, r28
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	88 23       	and	r24, r24
 3d0:	59 f0       	breq	.+22     	; 0x3e8 <doCmd+0x4c>
      inp = inp * 10 + (uint32_t)(x - '0');
 3d2:	80 91 6d 00 	lds	r24, 0x006D
 3d6:	90 91 6e 00 	lds	r25, 0x006E
 3da:	6a e0       	ldi	r22, 0x0A	; 10
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	d4 d0       	rcall	.+424    	; 0x588 <__mulhi3>
 3e0:	c0 97       	sbiw	r24, 0x30	; 48
 3e2:	28 0f       	add	r18, r24
 3e4:	39 1f       	adc	r19, r25
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <doCmd+0x56>
    } else {
      inpAkt = true;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 6f 00 	sts	0x006F, r24
      inp = (uint32_t)(x - '0');
 3ee:	20 53       	subi	r18, 0x30	; 48
 3f0:	31 09       	sbc	r19, r1
 3f2:	30 93 6e 00 	sts	0x006E, r19
 3f6:	20 93 6d 00 	sts	0x006D, r18
 3fa:	9d c0       	rjmp	.+314    	; 0x536 <doCmd+0x19a>
    }
    return;
  }
  serial_putch('\b');
 3fc:	88 e0       	ldi	r24, 0x08	; 8
 3fe:	82 de       	rcall	.-764    	; 0x104 <serial_putch>
  inpAkt = false;
 400:	10 92 6f 00 	sts	0x006F, r1

   switch (x) {
 404:	c8 36       	cpi	r28, 0x68	; 104
 406:	09 f4       	brne	.+2      	; 0x40a <doCmd+0x6e>
 408:	4a c0       	rjmp	.+148    	; 0x49e <doCmd+0x102>
 40a:	b0 f4       	brcc	.+44     	; 0x438 <doCmd+0x9c>
 40c:	c5 34       	cpi	r28, 0x45	; 69
 40e:	09 f4       	brne	.+2      	; 0x412 <doCmd+0x76>
 410:	42 c0       	rjmp	.+132    	; 0x496 <doCmd+0xfa>
 412:	50 f4       	brcc	.+20     	; 0x428 <doCmd+0x8c>
 414:	cd 30       	cpi	r28, 0x0D	; 13
 416:	49 f1       	breq	.+82     	; 0x46a <doCmd+0xce>
 418:	c0 32       	cpi	r28, 0x20	; 32
 41a:	09 f0       	breq	.+2      	; 0x41e <doCmd+0x82>
 41c:	87 c0       	rjmp	.+270    	; 0x52c <doCmd+0x190>
      case 13:
        serial_strP(stVTClr);
        break; 
    case ' ':
        msg(stStop,0);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	8e e4       	ldi	r24, 0x4E	; 78
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	2e c0       	rjmp	.+92     	; 0x484 <doCmd+0xe8>
    return;
  }
  serial_putch('\b');
  inpAkt = false;

   switch (x) {
 428:	c4 36       	cpi	r28, 0x64	; 100
 42a:	71 f1       	breq	.+92     	; 0x488 <doCmd+0xec>
 42c:	c6 36       	cpi	r28, 0x66	; 102
 42e:	01 f1       	breq	.+64     	; 0x470 <doCmd+0xd4>
 430:	c1 36       	cpi	r28, 0x61	; 97
 432:	09 f0       	breq	.+2      	; 0x436 <doCmd+0x9a>
 434:	7b c0       	rjmp	.+246    	; 0x52c <doCmd+0x190>
 436:	1c c0       	rjmp	.+56     	; 0x470 <doCmd+0xd4>
 438:	c3 37       	cpi	r28, 0x73	; 115
 43a:	09 f4       	brne	.+2      	; 0x43e <doCmd+0xa2>
 43c:	48 c0       	rjmp	.+144    	; 0x4ce <doCmd+0x132>
 43e:	58 f4       	brcc	.+22     	; 0x456 <doCmd+0xba>
 440:	cf 36       	cpi	r28, 0x6F	; 111
 442:	89 f1       	breq	.+98     	; 0x4a6 <doCmd+0x10a>
 444:	c0 37       	cpi	r28, 0x70	; 112
 446:	e9 f1       	breq	.+122    	; 0x4c2 <doCmd+0x126>
 448:	cc 36       	cpi	r28, 0x6C	; 108
 44a:	09 f0       	breq	.+2      	; 0x44e <doCmd+0xb2>
 44c:	6f c0       	rjmp	.+222    	; 0x52c <doCmd+0x190>
   case 'h':
        setHi();
        serial_strP(stHi);
        break;
   case 'l':
        setLo();
 44e:	65 df       	rcall	.-310    	; 0x31a <setLo>
        serial_strP(stLo);
 450:	8d e6       	ldi	r24, 0x6D	; 109
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	1e c0       	rjmp	.+60     	; 0x492 <doCmd+0xf6>
    return;
  }
  serial_putch('\b');
  inpAkt = false;

   switch (x) {
 456:	c7 37       	cpi	r28, 0x77	; 119
 458:	09 f4       	brne	.+2      	; 0x45c <doCmd+0xc0>
 45a:	53 c0       	rjmp	.+166    	; 0x502 <doCmd+0x166>
 45c:	c8 37       	cpi	r28, 0x78	; 120
 45e:	09 f4       	brne	.+2      	; 0x462 <doCmd+0xc6>
 460:	5b c0       	rjmp	.+182    	; 0x518 <doCmd+0x17c>
 462:	c6 37       	cpi	r28, 0x76	; 118
 464:	09 f0       	breq	.+2      	; 0x468 <doCmd+0xcc>
 466:	62 c0       	rjmp	.+196    	; 0x52c <doCmd+0x190>
 468:	3c c0       	rjmp	.+120    	; 0x4e2 <doCmd+0x146>
      case 13:
        serial_strP(stVTClr);
 46a:	8a e2       	ldi	r24, 0x2A	; 42
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	11 c0       	rjmp	.+34     	; 0x492 <doCmd+0xf6>
    case ' ':
        msg(stStop,0);
        break; 
    case 'a':   //
    case 'f':
        dauer=inp;
 470:	60 91 6d 00 	lds	r22, 0x006D
 474:	70 91 6e 00 	lds	r23, 0x006E
 478:	70 93 63 00 	sts	0x0063, r23
 47c:	60 93 62 00 	sts	0x0062, r22
        msg(stDauer, dauer);
 480:	8d ea       	ldi	r24, 0xAD	; 173
 482:	90 e0       	ldi	r25, 0x00	; 0
      break;
    default:
        serial_putch(x);
        serial_putch('?');
  } // case
}
 484:	cf 91       	pop	r28
        msg(stStop,0);
        break; 
    case 'a':   //
    case 'f':
        dauer=inp;
        msg(stDauer, dauer);
 486:	fd ce       	rjmp	.-518    	; 0x282 <msg>
        break;
    case 'd':
        PORTD &= ~_BV(pdEna);   // Lo
 488:	96 98       	cbi	0x12, 6	; 18
        PORTD &= ~_BV(pdMoLi);  // Lo
 48a:	94 98       	cbi	0x12, 4	; 18
        PORTD &= ~_BV(pdMoRe);  // Lo
 48c:	95 98       	cbi	0x12, 5	; 18
        serial_strP(stDisa);
 48e:	83 ea       	ldi	r24, 0xA3	; 163
 490:	90 e0       	ldi	r25, 0x00	; 0
      break;
    default:
        serial_putch(x);
        serial_putch('?');
  } // case
}
 492:	cf 91       	pop	r28
        break;
    case 'd':
        PORTD &= ~_BV(pdEna);   // Lo
        PORTD &= ~_BV(pdMoLi);  // Lo
        PORTD &= ~_BV(pdMoRe);  // Lo
        serial_strP(stDisa);
 494:	e2 ce       	rjmp	.-572    	; 0x25a <serial_strP>
        break;
    case 'E':
        PORTD |=_BV(pdEna);  //Hi danger of burning
 496:	96 9a       	sbi	0x12, 6	; 18
        serial_strP(stEna);
 498:	8b e9       	ldi	r24, 0x9B	; 155
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	fa cf       	rjmp	.-12     	; 0x492 <doCmd+0xf6>
        break;
   case 'h':
        setHi();
 49e:	3a df       	rcall	.-396    	; 0x314 <setHi>
        serial_strP(stHi);
 4a0:	83 e9       	ldi	r24, 0x93	; 147
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	f6 cf       	rjmp	.-20     	; 0x492 <doCmd+0xf6>
   case 'l':
        setLo();
        serial_strP(stLo);
        break;
   case 'o':
        PORTB = inp;
 4a6:	80 91 6d 00 	lds	r24, 0x006D
 4aa:	88 bb       	out	0x18, r24	; 24
        strobe();
 4ac:	39 df       	rcall	.-398    	; 0x320 <strobe>
        if (verbo) msg(stOne,PINB);
 4ae:	80 91 6a 00 	lds	r24, 0x006A
 4b2:	88 23       	and	r24, r24
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <doCmd+0x11c>
 4b6:	3f c0       	rjmp	.+126    	; 0x536 <doCmd+0x19a>
 4b8:	66 b3       	in	r22, 0x16	; 22
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	83 e6       	ldi	r24, 0x63	; 99
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	e1 cf       	rjmp	.-62     	; 0x484 <doCmd+0xe8>
        break;
   case 'p':        // one pulse
       pulse();
 4c2:	20 df       	rcall	.-448    	; 0x304 <pulse>
       msg(stDauer, dauer);
 4c4:	60 91 62 00 	lds	r22, 0x0062
 4c8:	70 91 63 00 	lds	r23, 0x0063
 4cc:	d9 cf       	rjmp	.-78     	; 0x480 <doCmd+0xe4>
      break;
   case 's':
       PORTB = inp;
 4ce:	80 91 6d 00 	lds	r24, 0x006D
 4d2:	88 bb       	out	0x18, r24	; 24
       msg(stSet, inp);
 4d4:	60 91 6d 00 	lds	r22, 0x006D
 4d8:	70 91 6e 00 	lds	r23, 0x006E
 4dc:	8a e4       	ldi	r24, 0x4A	; 74
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	d1 cf       	rjmp	.-94     	; 0x484 <doCmd+0xe8>
      break;
   case 'v':
       if (verbo) verbo=0; else verbo=1;
 4e2:	80 91 6a 00 	lds	r24, 0x006A
 4e6:	88 23       	and	r24, r24
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <doCmd+0x154>
 4ea:	10 92 6a 00 	sts	0x006A, r1
 4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <doCmd+0x15a>
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	80 93 6a 00 	sts	0x006A, r24
       msg(stVerb, verbo);
 4f6:	60 91 6a 00 	lds	r22, 0x006A
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	81 e4       	ldi	r24, 0x41	; 65
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	c1 cf       	rjmp	.-126    	; 0x484 <doCmd+0xe8>
      break;
  case 'w':
       progwait=inp;
 502:	60 91 6d 00 	lds	r22, 0x006D
 506:	70 91 6e 00 	lds	r23, 0x006E
 50a:	70 93 61 00 	sts	0x0061, r23
 50e:	60 93 60 00 	sts	0x0060, r22
       msg(stWait, progwait);
 512:	89 e3       	ldi	r24, 0x39	; 57
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	b6 cf       	rjmp	.-148    	; 0x484 <doCmd+0xe8>
        break;
  case 'x':
       runprog=inp;
 518:	60 91 6d 00 	lds	r22, 0x006D
 51c:	70 91 6e 00 	lds	r23, 0x006E
 520:	60 93 68 00 	sts	0x0068, r22
       msg(stRun, runprog);
 524:	77 27       	eor	r23, r23
 526:	86 e5       	ldi	r24, 0x56	; 86
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	ac cf       	rjmp	.-168    	; 0x484 <doCmd+0xe8>
      break;
    default:
        serial_putch(x);
 52c:	8c 2f       	mov	r24, r28
 52e:	ea dd       	rcall	.-1068   	; 0x104 <serial_putch>
        serial_putch('?');
 530:	8f e3       	ldi	r24, 0x3F	; 63
  } // case
}
 532:	cf 91       	pop	r28
       runprog=inp;
       msg(stRun, runprog);
      break;
    default:
        serial_putch(x);
        serial_putch('?');
 534:	e7 cd       	rjmp	.-1074   	; 0x104 <serial_putch>
  } // case
}
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <setup>:
 

void setup (void) {
//  DDRB |= _BV(pEna1); 
// Ausgang Hi
    DDRB= 0xFF;
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	87 bb       	out	0x17, r24	; 23
    PORTB=0x00;
 53e:	18 ba       	out	0x18, r1	; 24
    DDRD |= _BV(pdEna)          ;
 540:	8e 9a       	sbi	0x11, 6	; 17
    PORTD &= ~_BV(pdEna);
 542:	96 98       	cbi	0x12, 6	; 18
// Enables low
    DDRD |= _BV(pdEna)          ;
 544:	8e 9a       	sbi	0x11, 6	; 17
    PORTD &= ~_BV(pdEna);
 546:	96 98       	cbi	0x12, 6	; 18
    DDRD |= _BV(pdMoLi)          ;
 548:	8c 9a       	sbi	0x11, 4	; 17
    PORTD &= ~_BV(pdMoLi);
 54a:	94 98       	cbi	0x12, 4	; 18
    DDRD |= _BV(pdMoRe)          ;
 54c:	8d 9a       	sbi	0x11, 5	; 17
    PORTD &= ~_BV(pdMoRe);
 54e:	95 98       	cbi	0x12, 5	; 18
// Eingang
   DDRD &= ~_BV(pdBuLi);  // Input
 550:	8b 98       	cbi	0x11, 3	; 17
   PORTD |=_BV(pdBuLi);
 552:	93 9a       	sbi	0x12, 3	; 18
  
    serial_setup();
 554:	c9 dd       	rcall	.-1134   	; 0xe8 <serial_setup>
    msg(stInfo,SP);
 556:	6d b7       	in	r22, 0x3d	; 61
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	85 e7       	ldi	r24, 0x75	; 117
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	91 de       	rcall	.-734    	; 0x282 <msg>
    //timer1_setup(2);
    sei();
 560:	78 94       	sei
 562:	08 95       	ret

00000564 <main>:
}



int main(void) {
    setup();
 564:	ea df       	rcall	.-44     	; 0x53a <setup>
    unsigned char x;
    while (1) {
        x=serial_receive();
 566:	c8 dd       	rcall	.-1136   	; 0xf8 <serial_receive>
        if (x!=0) {
 568:	88 23       	and	r24, r24
 56a:	19 f0       	breq	.+6      	; 0x572 <main+0xe>
            runprog=0;
 56c:	10 92 68 00 	sts	0x0068, r1
            doCmd(x);
 570:	15 df       	rcall	.-470    	; 0x39c <doCmd>
        }
        if (runprog > 0) {
 572:	80 91 68 00 	lds	r24, 0x0068
 576:	88 23       	and	r24, r24
 578:	b1 f3       	breq	.-20     	; 0x566 <main+0x2>
            switch (runprog) {
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	11 f4       	brne	.+4      	; 0x582 <main+0x1e>
                case 1:
                    prog1();
 57e:	d4 de       	rcall	.-600    	; 0x328 <prog1>
                    break; 
 580:	f2 cf       	rjmp	.-28     	; 0x566 <main+0x2>
                default:
                    runprog=0; 
 582:	10 92 68 00 	sts	0x0068, r1
 586:	ef cf       	rjmp	.-34     	; 0x566 <main+0x2>

00000588 <__mulhi3>:
 588:	00 24       	eor	r0, r0
 58a:	55 27       	eor	r21, r21
 58c:	04 c0       	rjmp	.+8      	; 0x596 <__mulhi3+0xe>
 58e:	08 0e       	add	r0, r24
 590:	59 1f       	adc	r21, r25
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	00 97       	sbiw	r24, 0x00	; 0
 598:	29 f0       	breq	.+10     	; 0x5a4 <__mulhi3+0x1c>
 59a:	76 95       	lsr	r23
 59c:	67 95       	ror	r22
 59e:	b8 f3       	brcs	.-18     	; 0x58e <__mulhi3+0x6>
 5a0:	71 05       	cpc	r23, r1
 5a2:	b9 f7       	brne	.-18     	; 0x592 <__mulhi3+0xa>
 5a4:	80 2d       	mov	r24, r0
 5a6:	95 2f       	mov	r25, r21
 5a8:	08 95       	ret

000005aa <__udivmodhi4>:
 5aa:	aa 1b       	sub	r26, r26
 5ac:	bb 1b       	sub	r27, r27
 5ae:	51 e1       	ldi	r21, 0x11	; 17
 5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <__udivmodhi4_ep>

000005b2 <__udivmodhi4_loop>:
 5b2:	aa 1f       	adc	r26, r26
 5b4:	bb 1f       	adc	r27, r27
 5b6:	a6 17       	cp	r26, r22
 5b8:	b7 07       	cpc	r27, r23
 5ba:	10 f0       	brcs	.+4      	; 0x5c0 <__udivmodhi4_ep>
 5bc:	a6 1b       	sub	r26, r22
 5be:	b7 0b       	sbc	r27, r23

000005c0 <__udivmodhi4_ep>:
 5c0:	88 1f       	adc	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	5a 95       	dec	r21
 5c6:	a9 f7       	brne	.-22     	; 0x5b2 <__udivmodhi4_loop>
 5c8:	80 95       	com	r24
 5ca:	90 95       	com	r25
 5cc:	bc 01       	movw	r22, r24
 5ce:	cd 01       	movw	r24, r26
 5d0:	08 95       	ret

000005d2 <__udivmodsi4>:
 5d2:	a1 e2       	ldi	r26, 0x21	; 33
 5d4:	1a 2e       	mov	r1, r26
 5d6:	aa 1b       	sub	r26, r26
 5d8:	bb 1b       	sub	r27, r27
 5da:	fd 01       	movw	r30, r26
 5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <__udivmodsi4_ep>

000005de <__udivmodsi4_loop>:
 5de:	aa 1f       	adc	r26, r26
 5e0:	bb 1f       	adc	r27, r27
 5e2:	ee 1f       	adc	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	a2 17       	cp	r26, r18
 5e8:	b3 07       	cpc	r27, r19
 5ea:	e4 07       	cpc	r30, r20
 5ec:	f5 07       	cpc	r31, r21
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__udivmodsi4_ep>
 5f0:	a2 1b       	sub	r26, r18
 5f2:	b3 0b       	sbc	r27, r19
 5f4:	e4 0b       	sbc	r30, r20
 5f6:	f5 0b       	sbc	r31, r21

000005f8 <__udivmodsi4_ep>:
 5f8:	66 1f       	adc	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	1a 94       	dec	r1
 602:	69 f7       	brne	.-38     	; 0x5de <__udivmodsi4_loop>
 604:	60 95       	com	r22
 606:	70 95       	com	r23
 608:	80 95       	com	r24
 60a:	90 95       	com	r25
 60c:	9b 01       	movw	r18, r22
 60e:	ac 01       	movw	r20, r24
 610:	bd 01       	movw	r22, r26
 612:	cf 01       	movw	r24, r30
 614:	08 95       	ret

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
